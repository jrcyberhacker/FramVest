function initDashboard() {
  const email = localStorage.getItem("loggedInUser");
  if (!email) {
    alert("‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø! ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
    window.location.href = "registration.html";
    return;
  }

  const user = JSON.parse(localStorage.getItem(email));
  if (!user) {
    alert("‚ö†Ô∏è ‡¶≤‡¶ó‡¶á‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!");
    window.location.href = "login.html";
    return;
  }

  updateBalanceUI(user.balance || 0);
  renderActivePlans(user);
  startProfitTimer(user, email);
}

function updateBalanceUI(amount) {
  document.getElementById("balance").innerText = "‡ß≥" + amount;
}

function handleBuyPlan(price, dailyProfit, days) {
  const email = localStorage.getItem("loggedInUser");
  const user = JSON.parse(localStorage.getItem(email));

  if (user.balance < price) {
    alert("‚ùå ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡ßá‡¶á!");
    return;
  }

  if (!user.activePlans) user.activePlans = [];

  user.balance -= price;
  const plan = {
    price,
    dailyProfit,
    remainingDays: days,
    lastCollected: Date.now(),
    nextCollectTime: Date.now() + 24 * 60 * 60 * 1000
  };

  user.activePlans.push(plan);
  localStorage.setItem(email, JSON.stringify(user));

  updateBalanceUI(user.balance);
  renderActivePlans(user);
  alert("‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡ßç‡¶∞‡ßü ‡¶π‡ßü‡ßá‡¶õ‡ßá!");
}

function renderActivePlans(user) {
  const section = document.getElementById("activePlansSection");
  section.innerHTML = "";

  if (!user.activePlans || user.activePlans.length === 0) {
    section.innerHTML = "<p>üö´ ‡¶è‡¶ñ‡¶®‡ßã ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü‡¶ø‡¶≠ ‡¶®‡ßü‡•§</p>";
    return;
  }

  user.activePlans.forEach((plan, index) => {
    const now = Date.now();
    const remainingTime = plan.nextCollectTime - now;

    // Calculate time left for countdown
    const hours = Math.floor(remainingTime / (1000 * 60 * 60));
    const minutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((remainingTime % (1000 * 60)) / 1000);

    // Timer text
    const timerText = remainingTime > 0
      ? `‚è≥ ‡¶≤‡¶æ‡¶≠ ‡¶Ü‡¶∏‡¶¨‡ßá: ${hours} ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ${minutes} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ${seconds} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá`
      : `‚è∞ ‡¶è‡¶ñ‡¶® ‡¶≤‡¶æ‡¶≠ ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá!`;

    // Button status: disabled (‡¶ï‡¶æ‡¶≤‡ßã) if time left, enabled (‡¶∏‡¶¨‡ßÅ‡¶ú) if time elapsed
    const isClaimEnabled = remainingTime <= 0 && plan.remainingDays > 0;
    const buttonClass = isClaimEnabled ? "claim-btn active" : "claim-btn disabled";

    const div = document.createElement("div");
    div.className = "active-plan-card";
    div.innerHTML = `
      <p>üì¶ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶® ${index + 1}: ‡ß≥${plan.price} | ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶≤‡¶æ‡¶≠: ‡ß≥${plan.dailyProfit}</p>
      <p>üóìÔ∏è ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶¶‡¶ø‡¶®: ${plan.remainingDays}</p>
      <p>${timerText}</p>
      <button class="${buttonClass}" ${isClaimEnabled ? "" : "disabled"} onclick="collectProfit(${index})">üí∞ ‡¶≤‡¶æ‡¶≠ ‡¶ï‡ßç‡¶≤‡ßá‡¶Æ ‡¶ï‡¶∞‡ßÅ‡¶®</button>
    `;
    section.appendChild(div);
  });
}

function collectProfit(index) {
  const email = localStorage.getItem("loggedInUser");
  const user = JSON.parse(localStorage.getItem(email));
  const plan = user.activePlans[index];

  if (plan.remainingDays <= 0) {
    alert("‚ö†Ô∏è ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá‡¶õ‡ßá!");
    return;
  }

  if (Date.now() < plan.nextCollectTime) {
    alert("‚ö†Ô∏è ‡¶è‡¶ñ‡¶®‡ßã ‡¶≤‡¶æ‡¶≠ ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶π‡ßü‡¶®‡¶ø‡•§");
    return;
  }

  plan.remainingDays--;
  plan.lastCollected = Date.now();
  plan.nextCollectTime = Date.now() + 24 * 60 * 60 * 1000;
  user.balance += plan.dailyProfit;

  localStorage.setItem(email, JSON.stringify(user));
  updateBalanceUI(user.balance);
  renderActivePlans(user);
  alert(`üéâ ‡¶≤‡¶æ‡¶≠ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡ß≥${plan.dailyProfit} ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`);
}

// ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶∞‡¶ø‡¶°‡¶ø‡¶Æ ‡¶ï‡ßã‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡¶¨‡ßá
function addBalanceFromRedeem(value) {
  const email = localStorage.getItem("loggedInUser");
  const user = JSON.parse(localStorage.getItem(email));
  user.balance = (user.balance || 0) + value;
  localStorage.setItem(email, JSON.stringify(user));
  updateBalanceUI(user.balance);
  renderActivePlans(user);
  alert("‚úÖ ‡¶∞‡¶ø‡¶°‡¶ø‡¶Æ ‡¶∏‡¶´‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡ß≥" + value + " ‡¶Ø‡ßã‡¶ó ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§");
}

// ‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü
function startProfitTimer(user, email) {
  setInterval(() => {
    // ‡¶∂‡ßÅ‡¶ß‡ßÅ UI ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞
    renderActivePlans(user);
  }, 1000);
}